// 1 - M√ìDULOS IMPORTADOS
// Este m√≥dulo esportado permite realizar requisi√ß√µes HTTP para consultar um CEP na API ViaCEP.
const https = require('https');
// Este segundo m√≥dulo permite ler entradas do terminal, neste caso, o CEP a ser consultado.
const readline = require('readline');

// 2 - L√ìGICA DO PROGRAMA
// Cria uma interface de leitura no terminal para entrada (stdin) e sa√≠da (stdout).
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Pergunta o CEP ao usu√°rio e armazena na vari√°vel 'cep'.
rl.question('Digite o CEP: ', (cep) => {
  // Monta a URL da API do ViaCEP com o CEP digitado.
  const url = `https://viacep.com.br/ws/${cep}/json/`;

  // Faz uma requisi√ß√£o GET para a URL da API do ViaCEP.
  https.get(url, (res) => {
    // Cria uma vari√°vel 'data' para armazenar os dados recebidos da API.
    let data = '';

    // Recebe os dados em partes (chunks) e os concatena na vari√°vel 'data'.
    res.on('data', (chunk) => {
      data += chunk;
    });

// 3 - FINALIZA√á√ÉO DA REQUISI√á√ÉO
    // Quando terminar de receber, processa os dados, converte de JSON para exibir no console.
    res.on('end', () => {
      const endereco = JSON.parse(data);

      if (endereco.erro) {
        console.log('‚ùå CEP n√£o encontrado.');
      } else {
        console.log(`\nüìç Endere√ßo encontrado:
Logradouro: ${endereco.logradouro}
Bairro: ${endereco.bairro}
Cidade: ${endereco.localidade}
Estado: ${endereco.uf}`);
      }

      rl.close();
    });
  }).on('error', (err) => {
    // Exibe mensagem de erro caso a requisi√ß√£o falhe (Sem conex√£o, URL inv√°lida ou API fora do ar).
    console.error('Erro ao consultar o CEP, tente novamente mais tarde:', err.message);
    rl.close();
  });
});